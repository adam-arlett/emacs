
#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

# Using org mode for init setting allows you to 
# keep shit neat

* package repositories
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
;; (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("tromey" . "http://tromey.com/elpa/") t)
#+END_SRC
* interface
** startup

#+BEGIN_SRC emacs-lisp
  ;; Turn off mouse interface early in startup to avoid momentary display
  ;;(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (setq inhibit-startup-message t)

#+END_SRC 

** navigation

#+BEGIN_SRC emacs-lisp

  ;; "When several buffers visit identically-named files,
  ;; Emacs must give the buffers distinct names. The usual method
  ;; for making buffer names unique adds ‘<2>’, ‘<3>’, etc. to the end
  ;; of the buffer names (all but one of them).
  ;; The forward naming method includes part of the file's directory
  ;; name at the beginning of the buffer name
  ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; Turn on recent file mode so that you can more easily switch to
  ;; recently edited files when you first start emacs
  (setq recentf-save-file (concat user-emacs-directory ".recentf"))
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 40)

  ;; ido-mode allows you to more easily navigate choices. For example,
  ;; when you want to switch buffers, ido presents you with a list
  ;; of buffers in the the mini-buffer. As you start to type a buffer's
  ;; name, ido will narrow down the list of buffers to match the text
  ;; you've typed in
  ;; http://www.emacswiki.org/emacs/InteractivelyDoThings
  (ido-mode t)

  ;; This allows partial matches, e.g. "tl" will match "Tyrion Lannister"
  (setq ido-enable-flex-matching t)

  ;; Turn this behavior off because it's annoying
  (setq ido-use-filename-at-point nil)

  ;; Don't try to match file across all "work" directories; only match files
  ;; in the current directory displayed in the minibuffer
  (setq ido-auto-merge-work-directories-length -1)

  ;; Includes buffer names of recently open files, even if they're not
  ;; open now
  (setq ido-use-virtual-buffers t)

  ;; This enables ido in all contexts where it could be useful, not just
  ;; for selecting buffer and file names
 ;; (ido-ubiquitous-mode t)			
  (ido-everywhere t)

  ;; Shows a list of buffers
  (global-set-key (kbd "C-x C-b") 'ibuffer)


  ;; Enhances M-x to allow easier execution of commands. Provides
  ;; a filterable list of possible commands in the minibuffer
  ;; http://www.emacswiki.org/emacs/Smex
  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)

  ;; projectile everywhere!
  (projectile-global-mode)


#+END_SRC 

** editing

#+BEGIN_SRC emacs-lisp

        ;; No need for ~ files when editing
        (setq create-lockfiles nil)

        ;; Key binding to use "hippie expand" for text autocompletion
        ;; http://www.emacswiki.org/emacs/HippieExpand
        (global-set-key (kbd "M-/") 'hippie-expand)

        ;; Lisp-friendly hippie expand
        (setq hippie-expand-try-functions-list
              '(try-expand-dabbrev
                try-expand-dabbrev-all-buffers
                try-expand-dabbrev-from-kill
                try-complete-lisp-symbol-partially
                try-complete-lisp-symbol))

        ;; Highlights matching parenthesis
        (show-paren-mode 1)

        ;; Highlight current line
        (global-hl-line-mode 1)

        ;; Interactive search key bindings. By default, C-s runs
        ;; isearch-forward, so this swaps the bindings.
        (global-set-key (kbd "C-s") 'isearch-forward-regexp)
        (global-set-key (kbd "C-r") 'isearch-backward-regexp)
        (global-set-key (kbd "C-M-s") 'isearch-forward)
        (global-set-key (kbd "C-M-r") 'isearch-backward)

        ;; Save point position between sessions
          (require 'saveplace)
          (setq-default save-place t)
          (setq save-place-file (expand-file-name ".places" user-emacs-directory))

        ;; Emacs can automatically create backup files. This tells Emacs to
        ;; put all backups in ~/.emacs.d/backups. More info:
        ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
        (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                       "backups"))))

        ;; Make backups of files, even when they're in version control
        (setq vc-make-backup-files t)

        ;; (setq auto-save-default nil)		


        ;; comments
        (defun toggle-comment-on-line ()
          "comment or uncomment current line"
          (interactive)
          (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
        (global-set-key (kbd "C-;") 'toggle-comment-on-line)

        ;; fix weird os x kill error
        (defun ns-get-pasteboard ()
          "Returns the value of the pasteboard, or nil for unsupported formats."
          (condition-case nil
              (ns-get-selection-internal 'CLIPBOARD)
            (quit nil)))




#+END_SRC

** theme
  #+BEGIN_SRC emacs-lisp 


 ;;   (use-package zenburn-theme
 ;;    :ensure t
 ;;     )

(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-acario-dark t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
;;  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
;;  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
  #+END_SRC
** user interface

#+BEGIN_SRC emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-hl-line-mode t)
  (set-default-font "Monaco 16")

;; show line numbers
(global-linum-mode)

;; blinking cursor
(blink-cursor-mode 0)

;; full path in title bar
(setq-default frame-title-format "%b (%f)")

;; no bell
(setq ring-bell-function 'ignore)


#+END_SRC
* packages
** all the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons 
:ensure t
:defer 0.5)

(use-package all-the-icons-dired
:ensure t
)

(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

#+END_SRC
** try -test a package without installing
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
** posframe

#+BEGIN_SRC emacs-lisp
(use-package posframe :ensure t)
#+END_SRC
** which key - help for key bindings

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t 
      :config
      (which-key-mode))

#+END_SRC
** ace windows for easy window switching
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :init
  (progn
  (setq aw-scope 'global) ;; was frame
  (global-set-key (kbd "C-x O") 'other-frame)
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
  #+END_SRC

  #+RESULTS:
** avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC
** flycheck - syntax checking

  #+BEGIN_SRC emacs-lisp
    
  (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC
** paredit - automatic parenthesis closing

#+BEGIN_SRC emacs-lisp
(use-package paredit 
:ensure t
:config
(paredit-mode t)
(show-paren-mode 1))
#+END_SRC
** rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters 
:ensure t)

#+END_SRC

** company

#+BEGIN_SRC emacs-lisp

  (use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)

  (global-company-mode t)
  )

 ;; company box mode
 ;; (use-package company-box	
 ;; :ensure t
 ;; :hook (company-mode . company-box-mode)) 

#+END_SRC

** treemacs - tree navigation

#+BEGIN_SRC emacs-lisp

(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ([f8]        . treemacs)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

#+END_SRC

** PATH 
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
:ensure t
:config
(exec-path-from-shell-initialize)
)
#+END_SRC
** undo tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC
** magit - git porcelain

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
    (bind-key "C-x g" 'magit-status)
    ))

(setq magit-status-margin
  '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
    (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

    (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


    (use-package git-timemachine
    :ensure t
    )
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                              :hint nil)
    "
  Git gutter:
    _j_: next hunk        _s_tage hunk     _q_uit
    _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
    ^ ^                   _p_opup hunk
    _h_: first hunk
    _l_: last hunk        set start _R_evision
  "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("h" (progn (goto-char (point-min))
                (git-gutter:next-hunk 1)))
    ("l" (progn (goto-char (point-min))
                (git-gutter:previous-hunk 1)))
    ("s" git-gutter:stage-hunk)
    ("r" git-gutter:revert-hunk)
    ("p" git-gutter:popup-hunk)
    ("R" git-gutter:set-start-revision)
    ("q" nil :color blue)
    ("Q" (progn (git-gutter-mode -1)
                ;; git-gutter-fringe doesn't seem to
                ;; clear the markup right away
                (sit-for 0.1)
                (git-gutter:clear))
         :color blue))



#+END_SRC
** yasnippet - code syntax snippets

  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
        (yas-global-mode 1))

;    (use-package yasnippet-snippets
;      :ensure t)
  #+END_SRC
** beacon mode - flashes cursor on scroll
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
   (setq beacon-color "#666600")
    )
#+END_SRC
** expand-region - marks region by semantic units
#+BEGIN_SRC emacs-lisp

(use-package expand-region
:ensure t
:config
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C--") 'er/contract-region))

#+END_SRC
** bind-key
#+BEGIN_SRC emacs-lisp

(use-package bind-key
:ensure t)

#+END_SRC
** smex M-x enhancement
#+BEGIN_SRC emacs-lisp

(use-package smex
:ensure t)

#+END_SRC
** disabled auto complete - auto-complete

#+BEGIN_SRC emacs-lisp

  ;; (use-package auto-complete 
  ;; :ensure t
  ;; :
  ;; config
  ;; (
   ;; global-auto-complete-mode t))

#+END_SRC
* org mode


  Org bullets makes things look pretty
  #+BEGIN_SRC emacs-lisp

    (use-package org 
      :ensure t
      :pin org)

    (setenv "BROWSER" "firefox")
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    (custom-set-variables
     '(org-directory "~/Sync/orgfiles")
     '(org-default-notes-file (concat org-directory "/notes.org"))
     '(org-export-html-postamble nil)
     '(org-hide-leading-stars t)
     '(org-startup-folded (quote overview))
     '(org-startup-indented t)
     '(org-confirm-babel-evaluate nil)
     '(org-src-fontify-natively t)
     )

    (setq org-file-apps
          (append '(
                    ("\\.pdf\\'" . "evince %s")
                    ("\\.x?html?\\'" . "/usr/bin/firefox %s")
                    ) org-file-apps ))

    (global-set-key "\C-ca" 'org-agenda)
    (setq org-agenda-start-on-weekday nil)
    (setq org-agenda-custom-commands
          '(("c" "Simple agenda view"
             ((agenda "")
              (alltodo "")))))

    (global-set-key (kbd "C-c c") 'org-capture)

    (setq org-agenda-files (list "~/Sync/orgfiles/gcal.org"
                                 "~/Sync/orgfiles/soe-cal.org"
                                 "~/Sync/orgfiles/i.org"
                                 "~/Sync/orgfiles/schedule.org"))
    (setq org-capture-templates
          '(("a" "Appointment" entry (file  "~/Sync/orgfiles/gcal.org" )
             "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
            ("l" "Link" entry (file+headline "~/Sync/orgfiles/links.org" "Links")
             "* %? %^L %^g \n%T" :prepend t)
            ("b" "Blog idea" entry (file+headline "~/Sync/orgfiles/i.org" "Blog Topics:")
             "* %?\n%T" :prepend t)
            ("t" "To Do Item" entry (file+headline "~/Sync/orgfiles/i.org" "To Do and Notes")
             "* TODO %?\n%u" :prepend t)
            ("m" "Mail To Do" entry (file+headline "~/Sync/orgfiles/i.org" "To Do and Notes")
             "* TODO %a\n %?" :prepend t)
            ("g" "GMail To Do" entry (file+headline "~/Sync/orgfiles/i.org" "To Do and Notes")
             "* TODO %^L\n %?" :prepend t)
            ("n" "Note" entry (file+headline "~/Sync/orgfiles/i.org" "Notes")
             "* %u %? " :prepend t)
            ))
  

    (defadvice org-capture-finalize 
        (after delete-capture-frame activate)  
      "Advise capture-finalize to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
          (delete-frame)))

    (defadvice org-capture-destroy 
        (after delete-capture-frame activate)  
      "Advise capture-destroy to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
          (delete-frame)))  

    (use-package noflet
      :ensure t )
    (defun make-capture-frame ()
      "Create a new frame and run org-capture."
      (interactive)
      (make-frame '((name . "capture")))
      (select-frame-by-name "capture")
      (delete-other-windows)
      (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
        (org-capture)))
;; (require 'ox-beamer)
;;(require 'ox-reveal)
;; for inserting inactive dates
    (define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-inactive))))
(use-package ox-reveal
  :ensure t
  :config
    (require 'ox-reveal)
;;    (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.8.0/js/reveal.min.js")
;;    (setq org-reveal-mathjax t)
)
    (use-package htmlize :ensure t)

    (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")

  #+END_SRC

* clojure
#+BEGIN_SRC emacs-lisp
   (use-package cider
      :ensure t
      :config
  ;;    (add-hook 'cider-repl-mode-hook #'company-mode) 
  ;;    (add-hook 'cider-mode-hook #'company-mode)
      (add-hook 'cider-mode-hook #'eldoc-mode)
  ;;    (add-hook 'cider-mode-hook #'cider-hydra-mode)
;; Where to store the cider history.
(setq cider-repl-history-file "~/.emacs.d/cider-history")
;; Wrap when navigating history.
(setq cider-repl-wrap-history t)
;; When there's a cider error, show its buffer and switch to it
(setq cider-show-error-buffer t)
(setq cider-auto-select-error-buffer t)

      (setq cider-repl-use-pretty-printing t)
      (setq cider-repl-display-help-banner nil)
      ;;    (setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")

      :bind (("M-r" . cider-namespace-refresh)
             ("C-c r" . cider-repl-reset)
             ("C-c ." . cider-reset-test-run-tests))
      )

    (use-package clj-refactor
      :ensure t
      :config
      (add-hook 'clojure-mode-hook (lambda ()
                                     (clj-refactor-mode 1)
                                     ;; insert keybinding setup here
                                     ))
      (cljr-add-keybindings-with-prefix "C-c C-m")
      (setq cljr-warn-on-eval nil)
      :bind ("C-c '" . hydra-cljr-help-menu/body)
      )

#+END_SRC



